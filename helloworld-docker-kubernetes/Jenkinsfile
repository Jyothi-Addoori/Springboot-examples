pipeline {
    agent any
        
       environment {
        DOCKER_IMAGE = "jyothifirstdocker/spring-docker-kube"
        K8S_NAMESPACE = "springboot-demo"
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials-id' // Define Docker Hub credentials ID
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-springboot' // Define Kubernetes config credentials ID
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }

  /*      stage('change project to docker project') {
            steps {
                sh "pwd"
                dir('helloworld-docker-kubernetes') {
                sh "pwd"
                }
                sh "pwd"
            }
        }*/

        stage('Build and Test') {
            steps {
                dir('helloworld-docker-kubernetes') {
                    sh "mvn clean package"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                 dir('helloworld-docker-kubernetes') {
                    sh "docker build -t jyothifirstdocker/spring-docker-kube:${env.BUILD_ID} ."
                    sh "docker tag jyothifirstdocker/spring-docker-kube:${env.BUILD_ID} jyothifirstdocker/spring-docker-kube:latest"
                }
            }
        }

        stage('Push to dockerhub') {
            steps {
                script {
                       withCredentials([string(credentialsId: 'dockerhub-passwrd', variable: 'DOCKER_PASSWORD')]) {
                sh "echo $DOCKER_PASSWORD"          
                sh """
                    echo \$DOCKER_PASSWORD | docker login -u jyothifirstdocker --password-stdin
                """
                sh "docker push jyothifirstdocker/spring-docker-kube:${env.BUILD_ID}"
                sh "docker push jyothifirstdocker/spring-docker-kube:latest"
            }
                    }
                }
            }
        

        stage('Deploy to Kubernetes') {
            steps {
                dir('helloworld-docker-kubernetes') {
//add kubeconfig file data as secret text
                     kubeconfig(credentialsId: 'kubeconfig_file_new') {

                        sh 'kubectl apply -f deployment.yaml -n ${env.K8S_NAMESPACE}'
                        sh 'kubectl apply -f service.yaml -n ${env.K8S_NAMESPACE}'
                    }

                        
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}
